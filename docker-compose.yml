# Docker Compose file for running the Django API and Postgres database

services:
  traefik:
    image: traefik:latest
    restart: unless-stopped
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=hello@aycarl.com"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"  # Traefik listens on port 80 by default
      - "443:443"  # HTTPS (if using TLS certificates)
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./letsencrypt:/letsencrypt"
      - "./docker/traefik/traefik.yml:/etc/traefik/traefik.yml" # mount the traefik config file
    networks:
      - traefik  # Attach to the Traefik network

  todo_db:
    image: postgres
    restart: always
    hostname: todo_db
    container_name: todo_db
    env_file:
      - ./.env
    ports:
      - 5436:5432
    volumes:
      - ./local-db:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - traefik

  todo_api:
    build:
      context: .
      dockerfile: ./docker/django/DockerFile
    command: poetry run python manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    env_file:
      - ./.env
    depends_on:
      todo_db:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.todo_api.rule=Host(`todo-api.aycarl.local`)"
      - "traefik.http.routers.todo_api.entrypoints=web"
      - "traefik.http.routers.todo_api.tls.certresolver=myresolver"
    networks:
      - traefik

networks:
  traefik:
    external: true  # Allows external access to Traefik
